import { ethers } from 'ethers';

const MIN_TIME_LOCK_DURATION_SECONDS = 3600;
const BUFFER_TIME_SECONDS = 600;

const generateRandomBytes = (length: number): Uint8Array => {
  const array = new Uint8Array(length);
  crypto.getRandomValues(array);
  return array;
};

const bytesToHex = (bytes: Uint8Array): string =>
  Array.from(bytes)
    .map(b => b.toString(16).padStart(2, '0'))
    .join('');

/** üéØ –û–±—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ–∫—Ä–µ—Ç–∞ */
const generateSecret = () => {
  const secretBytes = generateRandomBytes(32);
  return {
    secretBytes,
    secretHex: bytesToHex(secretBytes),
  };
};

/** ‚úÖ –î–ª—è Ethereum ‚Äî c –ø—Ä–µ—Ñ–∏–∫—Å–æ–º 0x */
export const generateSecretAndHashlockEVM = () => {
  const { secretBytes, secretHex } = generateSecret();

  return {
    secret: `0x${secretHex}`,
    hashlock: ethers.sha256(secretBytes), // –≤–µ—Ä–Ω—ë—Ç —Å 0x
  };
};

/** ‚úÖ –î–ª—è ICP ‚Äî –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ 0x */
export const generateSecretAndHashlockICP = () => {
  const { secretBytes, secretHex } = generateSecret();

  return {
    secret: secretHex,
    hashlock: ethers.sha256(secretBytes).replace(/^0x/, ''), // —É–¥–∞–ª—è–µ–º 0x
  };
};

/** –ì–µ–Ω–µ—Ä–∞—Ü–∏—è timelock */
export const generateTimelockEVM = async (secondsFromNow: number = MIN_TIME_LOCK_DURATION_SECONDS) => {
  const timestampNow = Math.floor(Date.now() / 1000);

  return timestampNow + Math.max(
    MIN_TIME_LOCK_DURATION_SECONDS + BUFFER_TIME_SECONDS,
    secondsFromNow
  );
};

export const generateTimelockICP = async (secondsFromNow: number = MIN_TIME_LOCK_DURATION_SECONDS) => {
  const timelockEvm = await generateTimelockEVM(secondsFromNow);

  return BigInt(timelockEvm) * BigInt(1_000_000_000);
};

/** EVM ‚Üí ICP */
export function evmHashlockToIcp(evmHashlock: string): string {
  return evmHashlock.startsWith("0x") 
    ? evmHashlock.slice(2) // —É–±–∏—Ä–∞–µ–º 0x
    : evmHashlock;
}

/** ICP ‚Üí EVM */
export function icpHashlockToEvm(icpHashlock: string): string {
  return icpHashlock.startsWith("0x") 
    ? icpHashlock // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∫—Ç–æ-—Ç–æ –ø–µ—Ä–µ–¥–∞–ª —Å 0x ‚Äî –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    : `0x${icpHashlock}`;
}
