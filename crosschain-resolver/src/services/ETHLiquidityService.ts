import { ethers } from 'ethers';
import HashedTimeLockABI from '../../../shared/blockchain/interfaces/evm/hashedTimeLock.evm.abi.json';
import deploymentAddresses from '../../../shared/blockchain/deployment-addresses.json';

// ‚ö†Ô∏è —Ç—É—Ç —É–∫–∞–∑—ã–≤–∞–µ–º RPC –¥–ª—è —Å–µ—Ç–∏, –≥–¥–µ –¥–µ–ø–ª–æ–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç
const RPC_URL = process.env.ETH_RPC_URL || 'http://127.0.0.1:8545';

const hashedTimeLockEvmAddress = deploymentAddresses.evm.localhost.HashedTimeLock;

// —Å–æ–∑–¥–∞—ë–º provider + signer (—Ä–µ–∑–æ–ª–≤–µ—Ä –±—É–¥–µ—Ç –ø–æ–¥–ø–∏—Å—ã–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
const provider = new ethers.JsonRpcProvider(RPC_URL);
const signer = new ethers.Wallet(process.env.RESOLVER_PRIVATE_KEY!, provider);

function getContract() {
  return new ethers.Contract(hashedTimeLockEvmAddress, HashedTimeLockABI.abi, signer);
}

/** üîí Lock liquidity on Ethereum */
export async function lockLiquidityETH(receiver: string, hashlock: string, timelock: number | bigint, amount: string) {
  const contract = getContract();
  const amountInWei = ethers.parseEther(amount);

  console.log("üîß [ETH] Lock liquidity:", { receiver, hashlock, timelock, amount });

  const tx = await contract.newContractETH(receiver, hashlock, timelock, { value: amountInWei });
  console.log("‚è≥ Tx sent:", tx.hash);

  return await tx.wait();
}

/** ‚úÖ Claim locked liquidity */
export async function claimLiquidityETH(lockId: string, preimage: string) {
  const contract = getContract();

  console.log("‚úÖ [ETH] Claim:", { lockId, preimage });

  const tx = await contract.claim(lockId, preimage);
  console.log("‚è≥ Claim tx sent:", tx.hash);

  return await tx.wait();
}

/** üîÑ Refund locked liquidity */
export async function refundLiquidityETH(lockId: string) {
  const contract = getContract();

  console.log("üîÑ [ETH] Refund:", { lockId });

  const tx = await contract.refund(lockId);
  console.log("‚è≥ Refund tx sent:", tx.hash);

  return await tx.wait();
}
